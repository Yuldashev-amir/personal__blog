'use strict';

var getters = ['siblings', 'index', 'first', 'last', 'prev', 'next'];
var utils = require('./utils');

/**
 * Create a new AST `Node` with the given `val` and `type`.
 *
 * ```js
 * var node = new Node('*', 'Star');
 * var node = new Node({type: 'star', val: '*'});
 * ```
 * @name Node
 * @param {String|Object} `val` Pass a matched substring, or an object to merge onto the node.
 * @param {String} `type` The node type to use when `val` is a string.
 * @return {Object} node instance
 * @api public
 */

var Node = exports = module.exports = function Node(val, type) {
  this.define('isNode', true);
  this.type = null;

  if (utils.isObject(val)) {
    for (var key in val) {
      if (getters.indexOf(key) === -1) {
        this[key] = val[key];
      }
    }
  } else {
    this.type = type;
    this.val = val;
  }
};

/**
 * Define a non-enumberable property on the node instance.
 *
 * ```js
 * var node = new Node();
 * node.define('foo', 'something non-enumerable');
 * ```
 * @name .define
 * @param {String} `name`
 * @param {any} `val`
 * @return {Object} returns the node instance
 * @api public
 */

Node.prototype.define = function(name, val) {
  utils.define(this, name, val);
  return this;
};

/**
 * Given node `foo` and node `bar`, push node `bar` onto `foo.nodes`, and
 * set `foo` as `bar.parent`.
 *
 * ```js
 * var foo = new Node({type: 'foo'});
 * var bar = new Node({type: 'bar'});
 * foo.pushNode(bar);
 * ```
 * @name .pushNode
 * @param {Object} `node`
 * @return {undefined}
 * @api public